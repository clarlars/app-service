<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
  <display-name>webservice</display-name>
  <!-- UTF-8 configuration:
       
       The URL query and hash parameters might have UTF-8 characters in them. For that reason,
       for 100% compatibility, the URI should be parsed as if using a UTF-8 character set.
       
       For Tomcat, in the configuration directory, within server.xml
       
       For all active <Connector...> entries, add
       
       URIEncoding="UTF-8"
       
       i.e.
         <Connector ... URIEncoding="UTF-8"/>
         
    -->
  <!-- 
  	   The following mime-mapping entries have XSD validation errors because 
  	   we are setting the charset to utf-8. This is the easiest way to ensure
  	   that all static content is served as utf-8 content. 
  	   
  	   You can verify that this operates correctly by loading the plot reports
  	   and seeing if the d3 graphs work. If they don't, then utf-8 encoding is 
  	   not being employed.
   -->
  <mime-mapping>
    <extension>html</extension>
    <mime-type>text/html; charset=utf-8</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>css</extension>
    <mime-type>text/css; charset=utf-8</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>js</extension>
    <mime-type>text/javascript; charset=utf-8</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>json</extension>
    <mime-type>text/javascript; charset=utf-8</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>csv</extension>
    <mime-type>text/csv; charset=utf-8</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>init</extension>
    <mime-type>text/plain; charset=utf-8</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>properties</extension>
    <mime-type>text/xml; charset=utf-8</mime-type>
  </mime-mapping>
  <!-- Not sure why setting a filter doesn't work. 
       I think filters only apply to java servlets
       so these are circumvented by the direct-file-vending
       functions within Tomcat. -->
  <!--
  <filter>
    <filter-name>setCharacterEncodingFilter</filter-name>
    <filter-class>org.apache.catalina.filters.SetCharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>

  <filter-mapping>
    <filter-name>setCharacterEncodingFilter</filter-name>
    <url-pattern>*.html</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>setCharacterEncodingFilter</filter-name>
    <url-pattern>*.css</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>setCharacterEncodingFilter</filter-name>
    <url-pattern>*.js</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>setCharacterEncodingFilter</filter-name>
    <url-pattern>*.json</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>setCharacterEncodingFilter</filter-name>
    <url-pattern>*.csv</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>setCharacterEncodingFilter</filter-name>
    <url-pattern>*.init</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>setCharacterEncodingFilter</filter-name>
    <url-pattern>*.properties</url-pattern>
  </filter-mapping>
  -->
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
  </welcome-file-list>
</web-app>